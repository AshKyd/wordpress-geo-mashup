<?xml version="1.0"?>

<!-- Apache Ant build. If Ant is installed, running 'ant' in this directory should execute the build. -->
<!-- What does it do? Runs jslint on javascript, compresses javascript and CSS, and makes a ZIP archive ready to install in WordPress. -->
<!-- Source can be installed 'raw', not from a build archive, and should work using uncompressed resources. -->

<project name="geo-mashup" default="build">
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="tools/ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<!-- set global properties for this build -->
	<property name="source" location="."/>
	<property name="build.base" location="build"/>
	<exec executable="bash" outputproperty="version">
		<arg value="-c"/>
		<arg value="grep 'Version:' geo-mashup.php | sed -E 's/^.*Version: (.*)$/\1/'"/>
	</exec>

	<target name="composer">
		<exec executable="composer" failonerror="true">
			<arg value="install"/>
		</exec>
	</target>
	
	<target name="test">
		<exec executable="phpunit" failonerror="true" />
	</target>
		
	<target name="build" depends="composer,test">
		<!-- generate build number -->
		<buildnumber/>
		<tstamp>
			<format property="YEAR" pattern="yyyy"/>
		</tstamp>
		<property name="build.ver" value="${version}.${build.number}"/>
		<property name="build.ver.dir" location="${build.base}/${build.ver}"/>
		<property name="build.dir" location="${build.ver.dir}"/>
		
		<!-- make our build directory -->
		<mkdir dir="${build.dir}"/>
		
		<!-- copy our sources in -->
		<echo>--- COPY SOURCES ---</echo>
		<copy todir="${build.dir}">
			<fileset dir="${source}">
				<include name="*.*"/>
				<include name="css/**"/>
				<include name="js/**"/>
				<include name="images/**"/>
				<include name="lang/**"/>
				<include name="default-templates/**"/>
				<exclude name="release-checklist.txt"/>
				<exclude name="composer.*"/>
				<exclude name="build.*"/>
			</fileset>
		</copy>
		
		<!-- lint our javascripts -->
		<echo>--- LINT ---</echo>
		
		<for param="file">
			<path>
				<fileset dir="${build.dir}/js" includes="**/*.js">
					<exclude name="*datepicker.js"/>
					<exclude name="*markerclusterer.js"/>
					<exclude name="*ClusterMarker.js"/>
					<exclude name="*mapiconmaker.js"/>
					<exclude name="*qunit.js"/>
					<exclude name="*qunit-close-enough.js"/>
					<exclude name="*modernizr.js"/>
					<exclude name="mxn/*"/>
					<exclude name="leaflet/*"/>
				</fileset>
			</path>
			<sequential>
				<echo>Linting @{file}</echo>
				<java jar="tools/jslint/jslint4java-2.0.1.jar" fork="true" failonerror="true">
					<arg value="--white"/>
					<arg value="--sloppy"/>
					<arg value="--vars"/>
					<arg value="@{file}"/>
				</java>
			</sequential>
		</for>


		<!-- minify our sources -->
		<echo>--- MIN ---</echo>
		<for param="file">
			<path>
				<fileset dir="${build.dir}/js" includes="**/*.js"/>
			</path>
			<sequential>
				<propertyregex override="yes" property="minfile" input="@{file}" regexp="(.*)\.js" replace="\1.min.js"/>
				<java jar="tools/yui-compressor/yuicompressor-2.4.2.jar" fork="true" failonerror="true">
					<arg value="-o"/>
					<arg value="${minfile}"/>
					<arg value="@{file}"/>
				</java>
			</sequential>
		</for>		
		<for param="file">
			<path>
				<fileset dir="${build.dir}/css" includes="**/*.css"/>
			</path>
			<sequential>
				<propertyregex override="yes" property="minfile" input="@{file}" regexp="(.*)\.css" replace="\1.min.css"/>
				<java jar="tools/yui-compressor/yuicompressor-2.4.2.jar" fork="true" failonerror="true">
					<arg value="-o"/>
					<arg value="${minfile}"/>
					<arg value="@{file}"/>
				</java>
			</sequential>
		</for>		

		<echo>--- MXN LICENSE ---</echo>
		<for param="file">
			<path>
				<fileset dir="${build.dir}/js/mxn" includes="*.js">
					<exclude name="*.js"/>
					<exclude name="license.js"/>
				</fileset>
			</path>
			<sequential>
				<concat destfile="${build.dir}/js/mxn/temp.t">
					<header file="${build.dir}/js/mxn/license.js"/>
					<fileset file="@{file}"/>
					<filterchain>
						<expandproperties/>
					</filterchain>
				</concat>
				<move file="${build.dir}/js/mxn/temp.t" tofile="@{file}" overwrite="true"/>
			</sequential>
		</for>

		<echo>--- POT ---</echo>
		<exec executable="php">
			<arg line="tools/wp-i18n-tools/makepot.php wp-plugin ${build.dir} ${build.dir}/lang/GeoMashup.pot geo-mashup"/>
		</exec>
		<copy file="${build.dir}/lang/GeoMashup.pot" todir="${source}/lang" />

		<!-- copy our dependencies in -->
		<echo>--- COPY DEPENDENCIES ---</echo>
		<copy todir="${build.dir}">
			<fileset dir="${source}">
				<include name="vendor/freemius/**"/>
			</fileset>
		</copy>

		<zip destfile="${build.base}/geo-mashup-${build.ver}.zip">
			<zipfileset dir="${build.ver.dir}" prefix="geo-mashup"/>
		</zip> 
		
	</target>

	<target name="jsdoc">
		<!-- document our sources -->
		<echo>--- JSDOC ---</echo>
		<property name="docs.dir" location="${build.base}/jsdocs-${version}"/>
		<java jar="tools/jsdoc-toolkit/jsrun.jar" fork="true" failonerror="true">
			<arg value="tools/jsdoc-toolkit/app/run.js"/>
			<arg value="${source}/js/geo-mashup.js"/>
			<arg value="${source}/js/geo-mashup-google.js"/>
			<arg value="${source}/js/geo-mashup-mxn.js"/>
			<arg value="${source}/js/geo-mashup-markerclusterer.js"/>
			<arg value="${source}/js/taxonomy.js"/>
			<arg value="${source}/js/location-editor.js"/>
			<arg value="-t=tools/jsdoc-toolkit/templates/jsdoc"/>
			<arg value="-d=${docs.dir}"/>
		</java>
	</target>

	<target name="phpdoc">
		<!-- document our sources -->
		<echo>--- PHPDOC ---</echo>
		<property name="docs.dir" location="${build.base}/phpdocs-${version}"/>
		<exec executable="phpdoc">
			<arg line='-d ${source} -i "tests/*,tools/*,build/*" -t ${docs.dir}'/>
		</exec>
	</target>
	
</project>
